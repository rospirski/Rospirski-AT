---
const links = [
  { label: 'Início', link: '#inicio' },
  { label: 'Serviços', link: '#servicos' },
  { label: 'Sobre', link: '#sobre' },
  { label: 'Contato', link: '#contato' },
]
---

<header class="fixed w-screen px-4 bg-black1 text-white border-b-[#333] border-b border-solid z-50">
  <nav class="nav-main flex justify-between items-center h-24 container max-w-7xl">
    <div class="logo flex-1">
      <a href="/" class="inline-block">
        <img
          src="https://assets.rospirski.com/img/logo/logo-r.svg"
          alt="Rospirski Assistência Técnica Logotipo"
          height="auto"
          width="157"
        />
      </a>
    </div>
    <nav class="hidden md:block navigation">
      <ul class="flex gap-4 font-1 text-xs">
        {
          links.map((i) => (
            <li>
              <a href={i.link} class="relative">
                {i.label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <div class="btn-whats hidden md:block flex-1 text-right">
      <div class="inline-block">
        <a
          href="https://rospirski.com/whatsapp"
          target="_blank"
          class="bg-green py-3 px-6 rounded-3xl flex items-center font-medium gap-3 hover:brightness-90 shadow-sm">
          <img src="https://assets.rospirski.com/img/icons/whatsapp-white.svg" alt="Whatsapp Icone" class="mt-[2px]" />
          <span>(42) 9 9917-5502</span>
        </a>
      </div>
    </div>
    <div class="md:hidden">
      <button id="navbar-burger" class="flex items-center p-3 fill-white">
        <svg class="block h-4 w-4" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" stroke="currentColor">
          <title>Mobile menu</title>
          <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"></path>
        </svg>
      </button>
    </div>
  </nav>

  <div id="navbar-menu" class="absolute z-50 hidden mx-auto">
    <div id="navbar-backdrop" class="fixed inset-0 bg-gray-800 opacity-25"></div>
    <nav
      class="fixed top-0 left-0 bottom-0 flex flex-col w-5/6 max-w-sm py-6 px-6 border-r overflow-y-auto bg-black1 border-gray-800">
      <button id="navbar-close">
        <svg
          class="h-6 w-6 text-white cursor-pointer hover:text-gray-100"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <ul class="mt-6 gap-4 font-1 text-lg text-white flex flex-col">
        {
          links.map((i) => (
            <li>
              <a href={i.link} class="relative mobile-link-click">
                {i.label}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</header>

<script lang="typescript">
  document.addEventListener('DOMContentLoaded', () => {
    const burger = document.getElementById('navbar-burger')
    const menu = document.getElementById('navbar-menu')
    const close = document.getElementById('navbar-close')
    const backdrop = document.getElementById('navbar-backdrop')
    const menuMobileLinks = document.querySelectorAll('.mobile-link-click')

    if (burger && menu) {
      burger.addEventListener('click', () => {
        menu.classList.toggle('hidden')
      })
    }

    if (close && menu) {
      close.addEventListener('click', () => {
        menu.classList.toggle('hidden')
      })
    }

    if (backdrop && menu) {
      backdrop.addEventListener('click', () => {
        menu.classList.toggle('hidden')
      })
    }

    menuMobileLinks.forEach((current) => {
      current.addEventListener('click', () => {
        menu.classList.toggle('hidden')
      })
    })

    const sections = document.querySelectorAll('section[id]')
    const dataLinks = []
    sections.forEach((current, i) => {
      dataLinks.push({
        element: current,
        sectionHeight: current.offsetHeight,
        sectionTop: current.offsetTop - 150,
        sectionId: current.getAttribute('id'),
      })
    })

    let activeURL = ''

    function navHighlighter() {
      let scrollY = window.scrollY

      if (scrollY > 100) {
        document.querySelector('.nav-main')?.classList.add('h-16')
        document.querySelector('.nav-main')?.classList.remove('h-24')
      } else {
        document.querySelector('.nav-main')?.classList.remove('h-16')
        document.querySelector('.nav-main')?.classList.add('h-24')
      }

      if (window.innerHeight + scrollY >= document.body.offsetHeight) {
        dataLinks.map((current, index) => {
          if (dataLinks.length - 1 === index) {
            document.querySelector('.navigation a[href*=' + current.sectionId + ']')?.classList.add('active')
          } else {
            document.querySelector('.navigation a[href*=' + current.sectionId + ']')?.classList.remove('active')
          }
        })
      } else {
        dataLinks.map((current, index) => {
          if (scrollY > current.sectionTop && scrollY <= current.sectionTop + current.sectionHeight) {
            document.querySelector('.navigation a[href*=' + current.sectionId + ']')?.classList.add('active')
          } else {
            document.querySelector('.navigation a[href*=' + current.sectionId + ']')?.classList.remove('active')
          }
        })
      }

      const active = document.querySelector('.navigation a.active')?.getAttribute('href') || ''
      if (activeURL === '') activeURL = active
      else {
        if (activeURL !== active) {
          history.pushState(null, '', active)
          activeURL = active
        }
      }
    }

    navHighlighter()

    window.addEventListener('scroll', navHighlighter)

    const linksNav = document.querySelectorAll('.navigation a')
    linksNav.forEach((i) => {
      i.addEventListener('click', (e) => {
        e.preventDefault()
        if (e.target?.hash) {
          const section = document.getElementById(e.target?.hash.replace('#', ''))?.offsetTop || 0
          window.scrollTo({ top: section - 96, behavior: 'smooth' })
        }
      })
    })
  })
</script>
